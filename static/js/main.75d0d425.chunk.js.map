{"version":3,"sources":["actions/App.js","reducers/appReducer.js","reducers/index.js","store.js","components/NewTaskForm/index.jsx","components/TasksFilter/index.jsx","components/Task/index.jsx","components/TaskList/index.jsx","Pages/Main/index.jsx","App.js","index.js"],"names":["ADD_NEW_TODO","HANDLE_VALUE","GET_CURRENT_KEY","HANDLE_COMPLETED","REMOVE_TODO","SET_EDIT_MODE","CANCEL_EDIT_MODE","ADD_EDITED_TODO","REMOVE_COMPLETED","SET_CURRENT_FILTER","getCurrentKey","key","type","payload","cancelEditMode","idx","taskStatus","initialState","todos","id","Date","now","text","time","status","currentFilter","inputValue","currentKey","rootReducer","combineReducers","app","state","trim","concat","Math","random","getHours","getMinutes","i","updated","copy","splice","cloned","some","e","map","canceledCopy","index","editedText","editedStatus","edited","filter","store","createStore","NewTaskForm","valueHandler","dispatch","useDispatch","val","useSelector","useEffect","className","value","placeholder","autoFocus","onChange","onKeyPress","onInput","filters","TasksFilter","tasksRemaining","onFilter","onRemoveCompleted","current","onClick","data-filter","Task","onComplete","onRemove","useState","setValue","currentlyEditing","setIsCurrentlyEditing","prevStatus","setPrevStatus","inputRef","useRef","handleKey","keyCode","window","removeEventListener","addEventListener","cn","completed","editing","checked","setEditMode","onSubmit","preventDefault","ref","target","onEdit","TaskList","tasks","handleCompleted","removeTodo","Main","activeTasks","completedTasks","length","tasksToRender","handleValue","dataset","App","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75d0d425.chunk.js","sourcesContent":["export const ADD_NEW_TODO = \"ADD_NEW_TODO\";\nexport const HANDLE_VALUE = \"HANDLE_VALUE\";\nexport const GET_CURRENT_KEY = \"GET_CURRENT_KEY\";\nexport const HANDLE_COMPLETED = \"HANDLE_COMPLETED\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const SET_EDIT_MODE = \"SET_EDIT_MODE\";\nexport const CANCEL_EDIT_MODE = \"CANCEL_EDIT_MODE\";\nexport const ADD_EDITED_TODO = \"ADD_EDITED_TODO\";\nexport const REMOVE_COMPLETED = \"REMOVE_COMPLETED\";\nexport const SET_CURRENT_FILTER = \"SET_CURRENT_FILTER\";\n\nexport const addTodo = (newTodo) => ({\n  type: ADD_NEW_TODO,\n  payload: newTodo,\n});\n\nexport const handleValue = (value) => ({\n  type: HANDLE_VALUE,\n  payload: value,\n});\n\nexport const getCurrentKey = (key) => ({\n  type: GET_CURRENT_KEY,\n  payload: key,\n});\n\nexport const handleCompleted = (i, status) => ({\n  type: HANDLE_COMPLETED,\n  payload: { i, status },\n});\n\nexport const removeTodo = (i) => ({\n  type: REMOVE_TODO,\n  payload: i,\n});\n\nexport const addEditedTodo = (index, editedText, editedStatus) => ({\n  type: ADD_EDITED_TODO,\n  payload: { index, editedText, editedStatus },\n});\n\nexport const setEditMode = (i) => ({\n  type: SET_EDIT_MODE,\n  payload: i,\n});\n\nexport const cancelEditMode = (idx, taskStatus) => ({\n  type: CANCEL_EDIT_MODE,\n  payload: { idx, taskStatus },\n});\n\nexport const removeCompleted = (todos) => ({\n  type: REMOVE_COMPLETED,\n  payload: todos,\n});\n\nexport const setCurrentFilter = (active) => ({\n  type: SET_CURRENT_FILTER,\n  payload: active,\n});\n","import { setFilter } from \"../utils\";\n\nimport {\n  ADD_NEW_TODO,\n  HANDLE_VALUE,\n  GET_CURRENT_KEY,\n  HANDLE_COMPLETED,\n  REMOVE_TODO,\n  SET_EDIT_MODE,\n  CANCEL_EDIT_MODE,\n  ADD_EDITED_TODO,\n  REMOVE_COMPLETED,\n  SET_CURRENT_FILTER,\n} from \"../actions/App\";\n\nconst initialState = {\n  todos: [\n    {\n      id: Date.now(),\n      text: \"Learn React\",\n      time: \"12:25\",\n      status: \"active\",\n    },\n    {\n      id: 1,\n      text: \"Learn Redux\",\n      time: \"12:27\",\n      status: \"active\",\n    },\n    {\n      id: 2,\n      text: \"Ask Serhio questions about JS\",\n      time: \"12:29\",\n      status: \"completed\",\n    },\n    {\n      id: 3,\n      text: \"Learn async code from code.mu\",\n      time: \"12:45\",\n      status: \"active\",\n    },\n  ],\n  currentFilter: \"all\",\n  inputValue: \"\",\n  currentKey: null,\n};\n\nconst appReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case ADD_NEW_TODO:\n      if (payload.trim()) {\n        return {\n          ...state,\n          inputValue: \"\",\n          currentKey: null,\n          todos: state.todos.concat({\n            id: Math.random(),\n            text: payload,\n            time: new Date().getHours() + \" \" + new Date().getMinutes(),\n            status: \"active\",\n          }),\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case HANDLE_VALUE:\n      return {\n        ...state,\n        inputValue: payload,\n      };\n    case GET_CURRENT_KEY:\n      return {\n        ...state,\n        currentKey: payload,\n      };\n    case HANDLE_COMPLETED:\n      const { i, status } = payload;\n      const updated = [...state.todos];\n      updated[i].status = status === \"active\" ? \"completed\" : \"active\";\n      return {\n        ...state,\n        todos: updated,\n      };\n    case REMOVE_TODO:\n      const copy = [...state.todos];\n      copy.splice(payload, 1);\n      return {\n        ...state,\n        todos: copy,\n      };\n    case SET_EDIT_MODE:\n      const cloned = [...state.todos];\n      if (cloned.some((e) => e.status === \"editing\")) {\n        cloned.map((e) => (e.status === \"editing\" ? (e.status = \"active\") : e));\n      }\n      cloned[payload].status = \"editing\";\n      return {\n        ...state,\n        todos: cloned,\n      };\n    case CANCEL_EDIT_MODE:\n      const { idx, taskStatus } = payload;\n      const canceledCopy = [...state.todos];\n      canceledCopy[idx].status = taskStatus;\n      return {\n        ...state,\n        todos: canceledCopy,\n      };\n    case ADD_EDITED_TODO:\n      const { index, editedText, editedStatus } = payload;\n      const edited = [...state.todos];\n      edited[index].text = editedText;\n      edited[index].status = editedStatus;\n      return {\n        ...state,\n        todos: edited,\n      };\n    case REMOVE_COMPLETED:\n      return {\n        ...state,\n        todos: payload.filter(({ status }) => status === \"active\"),\n      };\n    case SET_CURRENT_FILTER:\n      return {\n        ...state,\n        currentFilter: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { appReducer };\n","import { combineReducers } from \"redux\";\n\nimport { appReducer } from \"./appReducer\";\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n});\n\nexport { rootReducer };\n","import { createStore } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport { rootReducer } from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport { store };\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTodo, getCurrentKey } from \"../../actions/App\";\n\nconst NewTaskForm = ({ valueHandler }) => {\n  const dispatch = useDispatch();\n  const val = useSelector(({ app: { inputValue } }) => inputValue);\n  const key = useSelector(({ app: { currentKey } }) => currentKey);\n\n  const onInput = (e) => dispatch(getCurrentKey(e.key));\n\n  useEffect(() => {\n    if (key === \"Enter\") {\n      dispatch(addTodo(val));\n    }\n  }, [key]);\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        value={val}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        autoFocus\n        onChange={(e) => valueHandler(e)}\n        onKeyPress={(e) => onInput(e)}\n      />\n    </header>\n  );\n};\n\nexport default NewTaskForm;\n","import React from \"react\";\n// import cn from \"classnames\";\n\nconst filters = [\"all\", \"active\", \"completed\"];\n\nconst TasksFilter = ({\n  tasksRemaining,\n  onFilter,\n  onRemoveCompleted,\n  filter,\n}) => {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {tasksRemaining ? `Active ${tasksRemaining}` : \"All Done!\"}\n      </span>\n      <ul className=\"filters\">\n        {filters.map((current) => {\n          return (\n            <li key={current}>\n              <button\n                onClick={onFilter}\n                className={current === filter ? \"selected\" : \"\"}\n                data-filter={current}\n              >\n                {current}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      <button onClick={onRemoveCompleted} className=\"clear-completed\">\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nexport default TasksFilter;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport cn from \"classnames\";\nimport {\n  addEditedTodo,\n  getCurrentKey,\n  setEditMode,\n  cancelEditMode,\n} from \"../../actions/App\";\n// import { handleCompleted } from \"../../actions/App\";\n\nconst Task = ({ text, time, status, i, onComplete, onRemove }) => {\n  const dispatch = useDispatch();\n  // const key = useSelector(({ app: { currentKey } }) => currentKey);\n  const [value, setValue] = useState(text);\n  const [currentlyEditing, setIsCurrentlyEditing] = useState(false);\n  const [prevStatus, setPrevStatus] = useState(null);\n  const inputRef = useRef(null);\n  const onEdit = ({ target: { value } }) => {\n    setValue(value);\n  };\n\n  const toggleEditMode = () => {\n    setPrevStatus(status);\n    setIsCurrentlyEditing(true);\n    dispatch(setEditMode(i));\n\n    // inputRef.current.focus();\n  };\n\n  const onEditSubmit = (e) => {\n    e.preventDefault();\n    setPrevStatus(status);\n    dispatch(addEditedTodo(i, value, prevStatus));\n    dispatch(cancelEditMode(i, prevStatus));\n    setIsCurrentlyEditing(false);\n  };\n\n  const handleKey = (e) => {\n    if (e.keyCode === 27) {\n      window.removeEventListener(\"keydown\", handleKey);\n      dispatch(cancelEditMode(i, prevStatus));\n      setIsCurrentlyEditing(false);\n      setValue(text);\n    }\n  };\n\n  useEffect(() => {\n    if (currentlyEditing) {\n      window.addEventListener(\"keydown\", handleKey);\n\n      return () => window.addEventListener(\"keydown\", handleKey);\n    }\n  });\n\n  return (\n    <li\n      className={cn({\n        completed: status === \"completed\",\n        editing: status === \"editing\",\n      })}\n    >\n      <div className=\"view\">\n        <input\n          onChange={() => onComplete(i, status)}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={status === \"completed\"}\n        />\n        <label>\n          <span className=\"description\">{text}</span>\n          <span className=\"created\">{time}</span>\n        </label>\n        <button onClick={toggleEditMode} className=\"icon icon-edit\" />\n        <button onClick={() => onRemove(i)} className=\"icon icon-destroy\" />\n      </div>\n      {status === \"editing\" && (\n        <form onSubmit={onEditSubmit}>\n          <input\n            type=\"text\"\n            autoFocus\n            ref={inputRef}\n            className=\"edit edit-mode\"\n            id={i}\n            onChange={(e) => onEdit(e)}\n            value={value}\n            onKeyPress={(e) => dispatch(getCurrentKey(e.key))}\n          />\n        </form>\n      )}\n    </li>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"../Task\";\nimport { handleCompleted, removeTodo } from \"../../actions/App\";\nimport { useDispatch } from \"react-redux\";\n\nconst TaskList = ({ tasks, valueHandler }) => {\n  const dispatch = useDispatch();\n\n  const onComplete = (i, status) => dispatch(handleCompleted(i, status));\n  const onRemove = (i) => dispatch(removeTodo(i));\n\n  return (\n    <ul className=\"todo-list\">\n      {tasks.map(({ id, text, time, status }, i) => (\n        <Task\n          key={id}\n          text={text}\n          time={time}\n          status={status}\n          i={i}\n          onComplete={onComplete}\n          onRemove={onRemove}\n          valueHandler={valueHandler}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default TaskList;\n","import React, { useEffect } from \"react\";\nimport NewTaskForm from \"../../components/NewTaskForm\";\nimport TasksFilter from \"../../components/TasksFilter\";\nimport TaskList from \"../../components/TaskList\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  setCurrentFilter,\n  removeCompleted,\n  handleValue,\n} from \"../../actions/App\";\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const tasks = useSelector(({ app: { todos } }) => todos);\n  const filter = useSelector(({ app: { currentFilter } }) => currentFilter);\n\n  const activeTasks = tasks.filter(\n    ({ status }) => status === \"active\" || status === \"editing\"\n  );\n  const completedTasks = tasks.filter(\n    ({ status }) => status === \"completed\" || status === \"editing\"\n  );\n  const tasksRemaining = tasks.filter(({ status }) => status !== \"completed\")\n    .length;\n  const tasksToRender =\n    filter === \"all\"\n      ? tasks\n      : filter === \"active\"\n      ? activeTasks\n      : completedTasks;\n\n  const onFilter = ({ target }) => {\n    const filter = target.dataset.filter;\n    dispatch(setCurrentFilter(filter));\n  };\n\n  const onRemoveCompleted = () => {\n    dispatch(removeCompleted(tasks));\n  };\n\n  const valueHandler = ({ target: { value } }) => dispatch(handleValue(value));\n\n  return (\n    <section className=\"todoapp\">\n      <NewTaskForm valueHandler={valueHandler} />\n      <TaskList tasks={tasksToRender} valueHandler={valueHandler} />\n      <TasksFilter\n        tasksRemaining={tasksRemaining}\n        onFilter={onFilter}\n        onRemoveCompleted={onRemoveCompleted}\n        filter={filter}\n      />\n    </section>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./Pages/Main\";\nimport \"./App.css\";\n/*\nПеренести верстку TODO из примера в ваше React приложение.\n    Разбейте верстку на компоненты и отобразите на экране визуальную часть TODO. Вынесите в отдельные компоненты:\n    Task - одна задача\nTaskList - список задач\nNewTaskForm - форма для добавления\nFooter - футер с информацией и кнопками\nTasksFilter - фильтры в футере\nСделайте, чтобы все данные в Task передавались через props из верхнего компонента вашего приложения\nОсобенности:\n\n    Пока не реализовывайте отображение строки \"created 5 minutes ago\" - мы займемся этим потом\nВремя создания задачи должно быть классом Date\nДля отображения в качестве строки используйте эту функцию библиотеки date-fns\n*/\n\nconst App = () => <Main />;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport App from \"./App\";\nconsole.log(store);\nconsole.log(store.getState());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}